{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Using the RPC API of a Neo node",
  "steps": [
    {
      "title": "Introduction",
      "description": "## Using the RPC API to interact with a Neo node\n\nIn this tour you will be guided through several examples that show how to fetch Neo blockchain information from a Neo node.\n\nThe tour uses the [*Neo Visual Devtracker*](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo3-visual-tracker) VSCode extenstion to spin up and manage a local Neo blockchain. Make sure you have the latest version installed.  \n**Neo Playground:** If you are using *Neo Playground*, the *Neo Visual Devtracker* is already installed. \n"
    },
    {
      "file": "default.neo-express",
      "description": "## Configuring Neo Visual Devtracker\n\nTo work with the devtracker we need to setup a blockchain configuration. The configuration we use for this tour is contained in this file (`default.neo-express`). The configuration defines consensus nodes, wallets and a few other settings. For this tour we configure one consensus node and two accounts with the names *Alice* and *Bob* (see `wallets` after the consensus node definition). The consensus node uses the private and public key of the *Alice* account.\n\nIn the Neo blockchain, all participating consensus nodes together form a multi-sig account from their public keys that serves as the *genesis* account. This is the account that holds all NEO and GAS at the beginning of the blockchain. Since we only configured one consensus node the *genesis* account is made up only from the public key of this single node. Nevertheless, we will need it to distributed NEO and GAS to *Alice* or *Bob*.\n\n\nBut first, let's start the configured blockchain network, i.e. a single node:\n  * [Click here](command:neo3-visual-devtracker.express.run) to run it.\n  * Wait a bit until a terminal tab is opened with outputs of the running node.\n  * You should see a new block being output every 15 seconds.\n\nOnce the node is running, execute the following commands to transfer NEO and GAS from the *genesis* account to *Alice*.\n\n* [Click here](command:neo3-visual-devtracker.express.transfer?%5B%7B%22asset%22%3A%20%22NEO%22%2C%20%22amount%22%3A%201000%2C%20%22sender%22%3A%20%22genesis%22%2C%20%22receiver%22%3A%20%22Alice%22%7D%5D) to issue a transaction to transfer 1000 NEO from 'genesis' to \"Alice\" account. You will see a balloon with the submitted transaction.\n* [Click here](command:neo3-visual-devtracker.express.transfer?%5B%7B%22asset%22%3A%20%22GAS%22%2C%20%22amount%22%3A%20100000%2C%20%22sender%22%3A%20%22genesis%22%2C%20%22receiver%22%3A%20%22Alice%22%7D%5D) to transfer 100000 GAS from 'genesis' to \"Alice\" account. ",
      "line": 2,
      "title": "Configuring Neo Visual Devtracker"
    },
    {
      "file": "src/main/java/io/neow3j/examples/jsonrpc/GetContractState.java",
      "description": "## Get contract state\n\nNow that we have a blockchain running we can start looking into how to interact with it.\n\nLet's first check the state of the Neo token contract. [Click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/jsonrpc/GetContractState.java\") to run this code.",
      "line": 16,
      "selection": {
        "start": {
          "line": 14,
          "character": 38
        },
        "end": {
          "line": 14,
          "character": 54
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/jsonrpc/GetBalance.java",
      "description": "## Get balance\n\nLet's create a fungible token instance with the script hash of the token contract (in this example the NEO token). Neow3j also has a separate wrapper class for the Neo and the Gas token - here we just visualize how you can initialize your own fungible token in neow3j.\n\nNow let's get the NEO balance of Alice's account. [Click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/jsonrpc/GetBalance.java\") to run this code.",
      "line": 15,
      "title": "Get balance"
    },
    {
      "file": "src/main/java/io/neow3j/examples/jsonrpc/SendNeoToAddress.java",
      "description": "## Send NEO to address\n\nNow let's use the RPC call `sendtoaddress` to send NEO from Alice to BOB. [Click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/jsonrpc/SendNeoToAddress.java\") to run this code.",
      "line": 21
    },
    {
      "file": "src/main/java/io/neow3j/examples/jsonrpc/GetWalletState.java",
      "description": "## Get wallet balance\n\nYou can also the get the wallet balance of the wallet that is stored in the currently running Neo node. [Click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/jsonrpc/GetWalletState.java\") to run this code.",
      "line": 39
    },
    {
      "file": "src/main/java/io/neow3j/examples/jsonrpc/ValidateNEOAddress.java",
      "description": "# Validate NEO address\n\nIf you want to check if an address is a valid NEO address, you can make use of the RPC call `validateaddress`. Enter the address that you want to check here and then [click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/jsonrpc/ValidateNEOAddress.java\") to run this code.",
      "line": 10,
      "selection": {
        "start": {
          "line": 10,
          "character": 26
        },
        "end": {
          "line": 10,
          "character": 44
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/jsonrpc/GetBlock.java",
      "description": "# Get block\n\nNow let's get information about a specific block. [Click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/jsonrpc/GetBlock.java\") to run this code. Change the block index in the code to get the information about a different block.\n\nCheck out the other RPC examples as well or try out other RPC calls yourself (see [here](https://docs.neo.org/v3/docs/en-us/reference/rpc/latest-version/api.html) for all supported RPC calls).",
      "line": 14
    }
  ],
  "description": "In this tour you will be guided through several examples that show how to fetch information from a neo-node by using the remote procedure calls (RPC) API."
}