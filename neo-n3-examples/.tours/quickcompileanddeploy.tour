{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Compile and Deploy Smart Contracts",
  "steps": [
    {
      "directory": "",
      "description": "## Your first Smart Contract with neow3j!\n\nThis tour will guide you through the process of compiling and deploying your **first** neow3j smart contract to Neo!\n\nThe tour uses the [*Neo Visual Devtracker*](https://marketplace.visualstudio.com/items?itemName=ngd-seattle.neo-visual-devtracker) VSCode extenstion to spin up and manage a local Neo blockchain. Make sure you have the latest version installed.  \n**Neo Playground:** If you are using *Neo Playground*, the *Neo Visual Devtracker* is already installed. ",
      "title": "Introduction"
    },
    {
      "file": "default.neo-express",
      "description": "## Configuring Neo Visual Devtracker\n\nTo work with the devtracker, we need to setup a blockchain configuration. The configuration we use for this tour is contained in the file that we are currently in (`default.neo-express`). The configuration defines consensus nodes, wallets and a few other settings. For this tour we configure one consensus node and two accounts with the names *Alice* and *Bob* (see the `wallets` section after the consensus node definition). The consensus node uses the private and public key of the *Alice* account.\n\nIn the Neo blockchain, all participating consensus nodes together form a multi-sig account from their public keys that serves as the *genesis* account. This is the account that holds all NEO and GAS at the beginning of the blockchain. Since we only configured one consensus node the *genesis* account is made up only from the public key of this single node. Nevertheless, we will need it to distributed NEO and GAS to *Alice* or *Bob*.\n\n\nBut first, let's start the configured blockchain network, i.e. a single node:\n  * [Click here](command:neo3-visual-devtracker.express.run) to run it.\n  * Wait a bit until a terminal tab is opened with outputs of the running node.\n  * You should see a new block being output every 15 seconds.\n\nOnce the node is running, execute the following commands to transfer NEO and GAS from the *genesis* account to *Alice*.\n\n* [Click here](command:neo3-visual-devtracker.express.transfer?%5B%7B%22asset%22%3A%20%22NEO%22%2C%20%22amount%22%3A%201000%2C%20%22sender%22%3A%20%22genesis%22%2C%20%22receiver%22%3A%20%22Alice%22%7D%5D) to issue a transaction to transfer 1000 NEO from 'genesis' to \"Alice\" account. You will see a balloon with the submitted transaction.\n* [Click here](command:neo3-visual-devtracker.express.transfer?%5B%7B%22asset%22%3A%20%22GAS%22%2C%20%22amount%22%3A%20100000%2C%20%22sender%22%3A%20%22genesis%22%2C%20%22receiver%22%3A%20%22Alice%22%7D%5D) to transfer 100000 GAS from 'genesis' to \"Alice\" account. ",
      "line": 2,
      "selection": {
        "start": {
          "line": 25,
          "character": 29
        },
        "end": {
          "line": 25,
          "character": 63
        }
      }
    },
    {
      "file": "build.gradle",
      "description": "## neow3j Gradle Plugin\n\nNow that we have a blockchain running we can start looking into how to get a smart contract onto it.\n\nWe start in the `build.gradle` file showing the necessary Java project setup. \n\nTo compile smart contracts written in Java, one option is to use the Gradle Plugin that neow3j provides.\nThis `build.gradle` shows how to import the plugin. ",
      "line": 4,
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 49
        }
      }
    },
    {
      "file": "build.gradle",
      "description": "## neow3j Dependencies\n\nWe also added the `contract`, `devpack`, and `compiler` dependencies to the project. \nFor a Java project that is only concerned with smart contract development the `devpack` would suffice (plus the `compiler` if programmatic compilation is desired). The `contract` package is only added because there are other examples in this Java project that depend on it.\n\nMore info about each module can be found at [neow3j.io](https://neow3j.io).\n",
      "line": 21,
      "selection": {
        "start": {
          "line": 27,
          "character": 1
        },
        "end": {
          "line": 27,
          "character": 15
        }
      }
    },
    {
      "file": "build.gradle",
      "description": "## neow3j Compiler\n\nWhen the `io.neow3j.gradle-plugin` is applied to a Gradle project, the `neow3jCompiler` clause is enabled. Moreover, the Gradle task `neow3jCompile` is added to the project.\n\nThere are some options that can be configured here. They are describe in the next steps.",
      "selection": {
        "start": {
          "line": 4,
          "character": 9
        },
        "end": {
          "line": 4,
          "character": 32
        }
      },
      "line": 25
    },
    {
      "file": "build.gradle",
      "description": "## Specifying the Smart Contract class\n\nIn the `neow3jCompiler` clause you can set the `className` option, in which you specify the fully qualified name of the class that neow3j should compile to a smart contract.\n\nThere are several example contracts in the package `io.neow3j.examples.contractdevelopment.contracts`. If you want to compile one of them you can insert its name here. But, we will be focusing on the `FungibleToken` class for this tour.\n\nThe goal is to quickly compile the smart contract, deploy, and invoke a method on-chain.",
      "line": 28,
      "selection": {
        "start": {
          "line": 30,
          "character": 5
        },
        "end": {
          "line": 30,
          "character": 73
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java",
      "description": "## Fungible Token Contract\n\nThe `FungibleToken` smart contract is a simple token contract that follows the [NEP-17 standard](https://github.com/neo-project/proposals), which is the fungible token standard in Neo.\n\nThis smart contract is entirely writen in Java, and provides most of the constructions supported by the `neow3j` compiler.\n\nIn the next steps we'll go through some of the contract's details.",
      "line": 24,
      "selection": {
        "start": {
          "line": 27,
          "character": 14
        },
        "end": {
          "line": 27,
          "character": 27
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java",
      "description": "## Owner\n\nIn this example, `Alice` is set to be the smart contract owner (`NUrPrFLETzoe7N2FLi2dqTvLwc9L2Em84K` address).\n\nWe are using a method from the `StringLiteralHelper`, which is used for such occasions where you need to define a global variable from a string literal.",
      "line": 26,
      "selection": {
        "start": {
          "line": 26,
          "character": 55
        },
        "end": {
          "line": 26,
          "character": 89
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java",
      "description": "## Initial Supply\n\nThe smart contract will have the initial supply of 200 million tokens.\n\nOn the line below, the number of decimals the token will have is defined.\n\nNeo does not support floating point numbers, so token amounts represent token fractions. The total supply from above, therefore, only represents 2 tokens (because of the token having 8 decimals. i.e. 10^8 fractions).",
      "line": 31,
      "selection": {
        "start": {
          "line": 31,
          "character": 1
        },
        "end": {
          "line": 31,
          "character": 50
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java",
      "description": "## @OnDeployment Annotation\n\nThe `@OnDeployment` annotation makes marks the annotated method such that it will be executed automatically on smart contract deployment. \n\nThe annotated method doesn't need to have the name `deploy()` but can have any name of your choice.",
      "selection": {
        "start": {
          "line": 98,
          "character": 1
        },
        "end": {
          "line": 99,
          "character": 78
        }
      },
      "line": 90
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/contracts/FungibleToken.java",
      "description": "##  Allocate the initial supply to the contract owner\n\nHere, the whole initial supply is allocated to the owner of the contract, but only if it's the first deployment, i.e., the `update` argument is not true.",
      "line": 100,
      "selection": {
        "start": {
          "line": 106,
          "character": 1
        },
        "end": {
          "line": 111,
          "character": 1
        }
      }
    },
    {
      "file": "build.gradle",
      "description": "# Compile\n\nNow we will compile the FungibleToken contract. We already have it set in the `className` attribute.\n\nTo kickoff the compilation run the following command in the projects root folder.\n\n>> ./gradlew neow3jCompile\n\n(click on the command above to execute)\n\nThe following files are generated from the compilation (as shown in the output):\n* `FungibleToken.nef`: The smart contract binary.\n* `FungibleToken.manifest.json`: The metadata about the smart contract.\n* `FungibleToken.nefdbgnfo`: The symbols for smart contract debugging.\n\nNow it's time to deploy.",
      "line": 28,
      "selection": {
        "start": {
          "line": 30,
          "character": 18
        },
        "end": {
          "line": 30,
          "character": 72
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java",
      "description": "## Options for Deploying Smart Contracts\n\nThere are two ways for deploying a smart contract:\n\n1. Use the *Neo Visual DevTracker* function to manually deploy the smart contract, specifying the NEF file and the manifest;\n2. Or, use the `DeployFromFiles` class, which is a util just to demonstrate how developers can **programatically** deploy smart contracts with neow3j.\n\nIn this code tour we will proceed with option (2), since that allows us to automate the deployment process, e.g., for testing purposes.",
      "line": 20,
      "selection": {
        "start": {
          "line": 21,
          "character": 14
        },
        "end": {
          "line": 21,
          "character": 29
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java",
      "description": "## Specify the NEF and Manifest files\n\nHere, the NEF and manifest are loaded from the files that where produced by the compilation.\n\n\n",
      "selection": {
        "start": {
          "line": 35,
          "character": 1
        },
        "end": {
          "line": 43,
          "character": 10
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java",
      "description": "## Build the Transaction to Deploy\n\nBased on the `nefFile` and `manifest`, a transaction is built. The transaction makes a call to the `deploy` method of the `ContractManagement` contract. This is a native contract on Neo and handles contract deployment.\n\nThe transaction is signed and send to the Neo node.",
      "selection": {
        "start": {
          "line": 37,
          "character": 1
        },
        "end": {
          "line": 42,
          "character": 25
        }
      }
    },
    {
      "file": "src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java",
      "selection": {
        "start": {
          "line": 23,
          "character": 24
        },
        "end": {
          "line": 23,
          "character": 43
        }
      },
      "description": "# Deploy the Smart Contract\n\nNow, let's run the class to effectively deploy the smart contract.\n\n[Click here](command:java.debug.runJavaFile?path=\"src/main/java/io/neow3j/examples/contractdevelopment/DeployFromFiles.java\") to run.\n\nYou will see the hash of the transaction in which the deployment was issued and the hash/address of the deployed contract.\n\n**Troubleshooting:**\n\n* In case of \"Insufficient GAS\", [click here](command:neo3-visual-devtracker.express.transfer?%5B%7B%22asset%22%3A%20%22GAS%22%2C%20%22amount%22%3A%20100000%2C%20%22sender%22%3A%20%22genesis%22%2C%20%22receiver%22%3A%20%22Alice%22%7D%5D) to transfer GAS to `Alice` wallet.\n* In case of \"Failed to connect\" or \"Connection refused\", [click here](command:neo3-visual-devtracker.express.run) to start the Neo node.",
      "line": 22
    }
  ]
}